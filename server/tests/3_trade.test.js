import request from "supertest"

const baseURL = process.env.BASE_URL || "https://kutrading-server.onrender.com"

let token
let postId
let tradeId

beforeAll(async () => {
  // üîê ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏£‡∏±‡∏ö token ‡∏à‡∏≤‡∏Å production server
  const res = await request(baseURL)
    .post("/api/auth/test-login")
    .send({ email: "testuser@gmail.com" })

  token = res.body.token
  console.log("‚úÖ Token:", token)
})

describe("üîÅ TRADE MODULE (Production)", () => {
  it("üß± ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏£‡∏î", async () => {
    const postRes = await request(baseURL)
      .post("/api/posts")
      .set("Authorization", `Bearer ${token}`)
      .field("content", "‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏£‡∏î (Production)")

    expect([200, 201]).toContain(postRes.statusCode)
    postId = postRes.body.post?.id || postRes.body.id
    expect(postId).toBeDefined()
    console.log("‚úÖ Post created:", postId)
  })

  it("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ó‡∏£‡∏î‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô available)", async () => {
    const res = await request(baseURL)
      .post("/api/trades")
      .set("Authorization", `Bearer ${token}`)
      .send({
        postId,
        location: "KU KPS",
        offerText: "‡πÄ‡∏™‡∏ô‡∏≠‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏°‡∏ß (Production)",
      })

    expect([200, 201]).toContain(res.statusCode)
    expect(res.body.trade).toHaveProperty("id")
    expect(res.body.trade.status).toBe("available")

    tradeId = res.body.trade.id
    console.log("‚úÖ Trade created:", tradeId)
  })

  it("üö´ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÄ‡∏ó‡∏£‡∏î‡∏ã‡πâ‡∏≥‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏°", async () => {
    const res = await request(baseURL)
      .post("/api/trades")
      .set("Authorization", `Bearer ${token}`)
      .send({
        postId,
        location: "KU KPS",
        offerText: "‡πÄ‡∏™‡∏ô‡∏≠‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (Production)",
      })

    expect(res.statusCode).toBe(400)
    expect(res.body.message).toMatch(/‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß/)
    console.log("‚ö†Ô∏è Prevented duplicate trade request")
  })

  it("üü° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ trade ‡πÄ‡∏õ‡πá‡∏ô canceled ‡πÑ‡∏î‡πâ", async () => {
    const res = await request(baseURL)
      .patch(`/api/trades/${tradeId}/status`)
      .set("Authorization", `Bearer ${token}`)
      .send({ status: "canceled" })

    expect([200, 201]).toContain(res.statusCode)
    expect(res.body.trade.status).toBe("canceled")
    console.log("üü° Trade canceled")
  })

  it("üö´ ‡∏´‡∏•‡∏±‡∏á canceled ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ó‡∏£‡∏î‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å", async () => {
    const res = await request(baseURL)
      .post("/api/trades")
      .set("Authorization", `Bearer ${token}`)
      .send({
        postId,
        location: "KU KPS",
        offerText: "‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ç‡∏≠‡πÄ‡∏ó‡∏£‡∏î‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (Production)",
      })

    expect(res.statusCode).toBe(400)
    expect(res.body.message).toMatch(/‡∏Ç‡∏≠‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß/)
    console.log("‚úÖ Prevented trade after cancel")
  })
})
