// C:\marketplace3\server\src\socket.js
import { Server } from "socket.io"

let io

export function initSocket(server) {
  io = new Server(server, {
    cors: {
      origin: "http://localhost:5173", // ‚úÖ frontend
      methods: ["GET", "POST"],
      credentials: true,
    },
  })

  io.on("connection", (socket) => {
    console.log("‚úÖ User connected:", socket.id)

    // ‚úÖ join ‡∏´‡πâ‡∏≠‡∏á notification (‡πÅ‡∏ö‡∏ö handshake)
    const userId = socket.handshake.auth?.userId
    if (userId) {
      socket.join(`user_${userId}`)
      console.log(`üîî User ${userId} joined notification room (handshake)`)
    }

    // ‚úÖ join ‡∏´‡πâ‡∏≠‡∏á notification (‡πÅ‡∏ö‡∏ö register event)
    socket.on("register", ({ userId }) => {
      if (userId) {
        const room = `user_${userId}`
        if (!socket.rooms.has(room)) {
          // ‚úÖ ‡∏Å‡∏±‡∏ô join ‡∏ã‡πâ‡∏≥
          socket.join(room)
          console.log(`üîî User ${userId} joined room via register()`)
        }
      }
    })

    // ‚úÖ join ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó
    socket.on("joinRoom", ({ conversationId }) => {
      socket.join(`conv_${conversationId}`)
      console.log(`‚û°Ô∏è ${socket.id} joined room conv_${conversationId}`)
    })

    // ‚úÖ broadcast ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
    socket.on("message:new", (msg) => {
      console.log("üì© message:new", msg)
      io.to(`conv_${msg.conversationId}`).emit("message:new", msg)
    })

    // ‚úÖ broadcast ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    socket.on("message:read", ({ conversationId, userId, lastReadMessageId }) => {
      console.log("üëÅÔ∏è message:read", { conversationId, userId, lastReadMessageId })
      io.to(`conv_${conversationId}`).emit("message:read", {
        userId,
        lastReadMessageId,
      })
    })

    // ‚úÖ ‡∏£‡∏±‡∏ö event ‡πÄ‡∏°‡∏∑‡πà‡∏≠ frontend ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô noti ‡πÅ‡∏•‡πâ‡∏ß
    socket.on("notification:read", ({ id }) => {
      if (!id) return
      console.log("üëÅÔ∏è notification:read from client", id)
      io.emit("notification:read", { id }) // broadcast ‡πÑ‡∏õ‡∏ó‡∏∏‡∏Å client
    })

    // ‚úÖ ‡∏£‡∏±‡∏ö event ‡πÄ‡∏°‡∏∑‡πà‡∏≠ frontend ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
    socket.on("notification:markAllRead", () => {
      console.log("‚úÖ notification:markAllRead from client")
      io.emit("notification:markAllRead")
    })

    socket.on("disconnect", () => {
      console.log("‚ùå disconnected:", socket.id)
    })
  })

  return io
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö emit event ‡∏à‡∏≤‡∏Å controller
export function getIO() {
  if (!io) {
    // üß™ mock ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏ó‡∏™‡∏ï‡πå (Jest)
    if (process.env.NODE_ENV === "test") {
      return {
        to: () => ({
          emit: () => {
            // mock ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ error ‡πÉ‡∏ô‡πÄ‡∏ó‡∏™‡∏ï‡πå
          },
        }),
      }
    }

    // ‚ùå ‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ initSocket ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á
    throw new Error("Socket.io not initialized!")
  }

  return io
}
