// controllers/reportController.js
import prisma from "../config/prisma.js"
import nodemailer from "nodemailer"

export const reportUser = async (req, res) => {
  try {
    const { targetUserId, reason } = req.body

    // üß© ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    if (!targetUserId || !reason) {
      return res.status(400).json({ message: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•" })
    }

    if (targetUserId === req.user.id) {
      return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ" })
    }

    // üß± ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÉ‡∏´‡∏°‡πà
    const report = await prisma.report.create({
      data: {
        reporterId: req.user.id,
        targetUserId: Number(targetUserId),
        reason,
        status: "open",
      },
    })

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const admins = await prisma.user.findMany({
      where: { role: "admin" },
      select: { id: true, email: true },
    })

    // üì® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
    await Promise.all(
      admins.map((admin) =>
        prisma.notification.create({
          data: {
            userId: admin.id,
            type: "report",
            title: "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà",
            body: `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${req.user.email} ‡πÑ‡∏î‡πâ‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID ${targetUserId}`,
            metadata: { reportId: report.id },
          },
        })
      )
    )

    return res.json({ message: "‚úÖ ‡∏™‡πà‡∏á‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß", report })
  } catch (e) {
    console.error("‚ùå REPORT USER ERROR:", e)
    return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï" })
  }
}



// ‚úÖ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏î‡∏π‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const listReports = async (req, res) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if (req.user.role !== "admin") {
      return res.status(403).json({ message: "‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô" })
    }

    const reports = await prisma.report.findMany({
      orderBy: { createdAt: "desc" },
      include: {
        reporter: { select: { id: true, name: true, email: true } },
        targetUser: { select: { id: true, name: true, email: true } },
      },
    })

    return res.json(reports)
  } catch (e) {
    console.error("‚ùå Error fetching reports:", e)
    return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï" })
  }
}

// ‚úÖ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï (‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏™)
export const updateReportStatus = async (req, res) => {
  try {
    const { id } = req.params
    const { status } = req.body

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if (req.user.role !== "admin") {
      return res.status(403).json({ message: "‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô" })
    }

    const report = await prisma.report.update({
      where: { id: Number(id) },
      data: {
        status,
        resolvedById: req.user.id,
        resolvedAt: new Date(),
      },
    })

    return res.json({ message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", report })
  } catch (e) {
    console.error("‚ùå UPDATE REPORT ERROR:", e)
    return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï" })
  }
}

import prisma from "../config/prisma.js";
import SibApiV3Sdk from "sib-api-v3-sdk";

const brevoClient = SibApiV3Sdk.ApiClient.instance;
const apiKey = brevoClient.authentications["api-key"];
apiKey.apiKey = process.env.BREVO_API_KEY;
const emailApi = new SibApiV3Sdk.TransactionalEmailsApi();

const DEFAULT_SENDER = {
  email: process.env.SENDER_EMAIL || "facup877@gmail.com",
  name: "KU Trading Report Center",
};

// ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
export const notifyReportedUser = async (req, res) => {
  try {
    const { id } = req.params;
    const { message } = req.body;

    // üß© ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏û‡∏£‡πâ‡∏≠‡∏° relation ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const report = await prisma.report.findUnique({
      where: { id: Number(id) },
      include: {
        targetUser: true,
        reporter: true,
      },
    });

    if (!report) {
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
    }

    if (!report.targetUser) {
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (targetUser)");
    }

    // ‚úÖ log debug
    console.log("üì® Sending report notification to:", report.targetUser.email);
    console.log("üßæ Reason:", report.reason);

    // ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡πà‡∏≤‡∏ô Brevo API
    await emailApi.sendTransacEmail({
      sender: DEFAULT_SENDER,
      to: [{ email: report.targetUser.email }],
      subject: "üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡∏° KU Trading",
      htmlContent: `
        <p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏∏‡∏ì <b>${report.targetUser.name || "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"}</b>,</p>
        <p>‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Marketplace.</p>
        <p><b>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:</b> ${report.reason}</p>
        <p><b>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•:</b> ${message}</p>
        <br/>
        <p>‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ú‡∏¥‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</p>
        <hr/>
        <p style="font-size:12px;color:#888;">KU Trading Report Center</p>
      `,
    });

    console.log("‚úÖ Report notification email sent successfully");
    return res.json({ message: "‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!" });
  } catch (e) {
    console.error("‚ùå notifyReportedUser error:", e);
    return res.status(500).json({ message: e.message });
  }
};

