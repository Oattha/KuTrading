import prisma from '../config/prisma.js'
import bcrypt from "bcryptjs"

// ‚úÖ ‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
// src/controllers/userController.js
export const getProfile = async (req, res) => {
  try {
    const me = await prisma.user.findUnique({
      where: { id: req.user.id },
      include: {
        posts: {
          include: {
            images: true,
            comments: true,
            likes: true,
          },
        },
        reviewsReceived: true,
        documents: true, // ‚úÖ include KYC documents
      },
    })

    if (!me) {
      return res.status(404).json({ message: "User not found" })
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå passwordSet ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ front-end ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const userSafe = {
      ...me,
      passwordSet: !!me.password, // true ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    }

    // ‚ùå ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á password ‡∏à‡∏£‡∏¥‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
    delete userSafe.password

    return res.json(userSafe)
  } catch (err) {
    console.error("Error in getProfile:", err)
    return res.status(500).json({ message: "Error getting profile" })
  }
}

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
export const updateProfile = async (req, res) => {
  try {
    const { name, bio, avatarUrl } = req.body
    const updated = await prisma.user.update({
      where: { id: req.user.id },
      data: { name, bio, avatarUrl },
    })
    return res.json(updated)
  } catch (err) {
    console.error(err)
    return res.status(500).json({ message: 'Error updating profile' })
  }
}

// ‚úÖ ‡∏•‡∏¥‡∏™‡∏ï‡πå users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const listUsers = async (_req, res) => {
  try {
    const users = await prisma.user.findMany({
      select: {
        id: true,
        name: true,
        email: true,
        ratingAverage: true,
        ratingCount: true,
        avatarUrl: true,
        status: true,   // ‚úÖ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ admin ‡πÉ‡∏ä‡πâ‡∏î‡∏π‡∏ß‡πà‡∏≤ user active/pending/banned
      },
    })
    return res.json(users)
  } catch (err) {
    console.error(err)
    return res.status(500).json({ message: 'Error listing users' })
  }
}

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡πÉ‡∏ä‡πâ Cloudinary)
export const uploadProfilePicture = async (req, res) => {
  try {
    if (!req.file || !req.file.path) {
      return res.status(400).json({ ok: false, error: 'No file uploaded' })
    }

    const imageUrl = req.file.path // Cloudinary ‡∏™‡πà‡∏á URL ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
    const updated = await prisma.user.update({
      where: { id: req.user.id },
      data: { avatarUrl: imageUrl },
    })

    return res.json({ ok: true, url: updated.avatarUrl })
  } catch (err) {
    console.error(err)
    return res.status(500).json({ ok: false, error: 'Upload failed' })
  }
}


// ‚úÖ ‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå user ‡∏ï‡∏≤‡∏° id
export const getUserById = async (req, res) => {
  try {
    const id = Number(req.params.id)
    const user = await prisma.user.findUnique({
      where: { id },
      include: {
        posts: {
          include: { images: true, comments: true, likes: true },
        },
        reviewsReceived: true,
      },
    })

    if (!user) {
      return res.status(404).json({ message: "User not found" })
    }

    return res.json(user)
  } catch (err) {
    console.error(err)
    return res.status(500).json({ message: "Error getting user by id" })
  }
}

// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà)
export const setPassword = async (req, res) => {
  try {
    const userId = req.user.id
    const { oldPassword, password } = req.body

    if (!password) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà" })
    }

    const user = await prisma.user.findUnique({ where: { id: userId } })
    if (!user) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" })

    // üîê ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ password ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Å‡πà‡∏≤
    if (user.password) {
      if (!oldPassword) {
        return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô" })
      }

      const isMatch = await bcrypt.compare(oldPassword, user.password)
      if (!isMatch) {
        return res.status(401).json({ message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" })
      }
    }

    const hashed = await bcrypt.hash(password, 10)
    await prisma.user.update({
      where: { id: userId },
      data: { password: hashed },
    })

    return res.json({
      message: user.password ? "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" : "‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
    })
  } catch (err) {
    console.error(err)
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" })
  }
}

export const verifyPassword = async (req, res) => {
  try {
    const userId = req.user.id
    const { oldPassword } = req.body

    if (!oldPassword)
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°" })

    const user = await prisma.user.findUnique({ where: { id: userId } })
    if (!user) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" })
    if (!user.password)
      return res.status(400).json({ message: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" })

    const match = await bcrypt.compare(oldPassword, user.password)
    if (!match)
      return res.status(401).json({ message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" })

    return res.json({ message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" })
  } catch (err) {
    console.error(err)
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" })
  }
}
