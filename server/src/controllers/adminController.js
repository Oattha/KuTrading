import prisma from '../config/prisma.js'
import nodemailer from 'nodemailer'
import SibApiV3Sdk from "sib-api-v3-sdk";

// ‚ö° transporter (SMTP ‚Äî ‡∏ï‡∏≠‡∏ô dev ‡πÉ‡∏ä‡πâ Gmail ‡∏´‡∏£‡∏∑‡∏≠ Mailtrap ‡∏Å‡πá‡πÑ‡∏î‡πâ)
// ‚ö° transporter (SMTP ‚Äî ‡πÉ‡∏ä‡πâ Brevo)
/*const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,        // ‚úÖ smtp-relay.brevo.com
  port: Number(process.env.SMTP_PORT), // ‚úÖ 587
  secure: false, // ‚ùå ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ true ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô port 587
  auth: {
    user: process.env.SMTP_USER,       // ‚úÖ 9a5a54001@smtp-brevo.com
    pass: process.env.SMTP_PASS,       // ‚úÖ xsmtpsib-xxxx...
  },
})
*/
// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Brevo API client (‡∏û‡∏£‡πâ‡∏≠‡∏° fallback)
const brevoClient = SibApiV3Sdk.ApiClient.instance;
const apiKey = brevoClient.authentications["api-key"];
apiKey.apiKey = process.env.BREVO_API_KEY;

const emailApi = new SibApiV3Sdk.TransactionalEmailsApi();

// ‚úÖ fallback sender (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ domain ‡∏´‡∏£‡∏∑‡∏≠ sender env)
const DEFAULT_SENDER = {
  email: process.env.SENDER_EMAIL || "facup877@gmail.com", // fallback ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  name: "KU Trading System",
};




// =====================
// KYC Verification
// =====================
export const listPendingKyc = async (_req, res) => {
  try {
    const docs = await prisma.userDocument.findMany({
      where: { status: "submitted" },
      include: { user: true }
    })
    return res.json(docs)
  } catch (e) {
    return res.status(500).json({ message: "Error listing pending KYC", error: e.message })
  }
}

export const approveKyc = async (req, res) => {
  try {
    const { id } = req.params;

    const doc = await prisma.userDocument.update({
      where: { id: Number(id) },
      data: {
        status: "approved",
        reviewedAt: new Date(),
        reviewedById: req.user.id,
      },
      include: { user: true },
    });

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    await prisma.adminActionLog.create({
      data: {
        adminId: req.user.id,
        action: "approve_kyc",
        targetUserId: doc.userId,
        details: { docId: doc.id },
      },
    });

    console.log("üì® Sending KYC approval email to:", doc.user.email);

    // ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡πà‡∏≤‡∏ô Brevo API
    await emailApi.sendTransacEmail({
      sender: DEFAULT_SENDER,
      to: [{ email: doc.user.email }],
      subject: "KYC Approved ‚úÖ",
      htmlContent: `
        <p>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì <b>${doc.user.name || "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"}</b>,</p>
        <p>üéâ ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ <b>‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß</b></p>
        <p>‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Marketplace ‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö</p>
        <br/>
        <p>üìé ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:</p>
        <p><a href="${doc.fileUrl}" target="_blank">${doc.fileUrl}</a></p>
        <hr/>
        <p style="font-size:12px;color:#888;">KU Trading Verification System</p>
      `,
    });

    console.log("‚úÖ KYC approval email sent successfully!");
    return res.json({ message: "KYC approved and email sent", doc });
  } catch (e) {
    console.error("‚ùå approveKyc error:", e);
    return res.status(500).json({
      message: "Error approving KYC",
      error: e.message,
    });
  }
};

export const rejectKyc = async (req, res) => {
  try {
    const { id } = req.params;
    const { reason } = req.body;

    const doc = await prisma.userDocument.update({
      where: { id: Number(id) },
      data: {
        status: "rejected",
        reviewedAt: new Date(),
        reviewedById: req.user.id,
        note: reason || null,
      },
      include: { user: true },
    });

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£ reject
    await prisma.adminActionLog.create({
      data: {
        adminId: req.user.id,
        action: "reject_kyc",
        targetUserId: doc.userId,
        details: { docId: doc.id },
        reason: reason || null,
      },
    });

    console.log("üì© Sending reject email to:", doc.user.email);
    console.log("üåê File URL:", doc.fileUrl);

    // ‚úÖ ‡πÉ‡∏ä‡πâ Brevo API ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏ó‡∏ô SMTP
    const sender = {
      email: "facup877@gmail.com", // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      name: "KU Trading Team",
    };

    const receivers = [{ email: doc.user.email }];

    await emailApi.sendTransacEmail({
      sender: DEFAULT_SENDER,
      to: receivers,
      subject: "KYC Rejected ‚ùå",
      htmlContent: `
        <p>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì <b>${doc.user.name || "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"}</b>,</p>
        <p>‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì <b>‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</b> ‚ùå</p>
        <p><b>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:</b> ${reason || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏"}</p>
        <p>‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ:</p>
        <p><a href="${doc.fileUrl}" target="_blank">${doc.fileUrl}</a></p>
        <hr />
        <p style="font-size:12px;color:#888;">KU Trading Verification System</p>
      `,
    });

    console.log("‚úÖ Brevo email sent successfully!");

    return res.json({ message: "KYC rejected", doc });
  } catch (e) {
    console.error("‚ùå rejectKyc error:", e);
    return res.status(500).json({
      message: "Error rejecting KYC",
      error: e.message,
    });
  }
};



// =====================
// User Management
// =====================
export const listUsersAdmin = async (_req, res) => {
  try {
    const users = await prisma.user.findMany({
      include: {
        documents: true, // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ relation ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö schema
      },
    })
    return res.json(users)
  } catch (e) {
    console.error("‚ùå listUsersAdmin error:", e)
    return res.status(500).json({ message: "Error listing users", error: e.message })
  }
}

export const toggleBanUser = async (req, res) => {
  try {
    const { userId } = req.params
    const u = await prisma.user.findUnique({ where: { id: Number(userId) } })
    if (!u) return res.status(404).json({ message: "User not found" })

    const updated = await prisma.user.update({
      where: { id: u.id },
      data: { status: u.status === "banned" ? "active" : "banned" } // ‚úÖ toggle
    })
    return res.json(updated)
  } catch (e) {
    console.error("‚ùå toggleBanUser error:", e)
    return res.status(500).json({ message: "Error toggling ban", error: e.message })
  }
}

// =====================
// Moderation
// =====================
export const hideReview = async (req, res) => {
  try {
    const { reviewId } = req.params
    const updated = await prisma.review.update({
      where: { id: Number(reviewId) },
      data: { hidden: true }
    })
    return res.json({ message: "Review hidden", updated })
  } catch {
    return res.status(500).json({ message: "Error hiding review" })
  }
}

export const resolveReport = async (req, res) => {
  try {
    const { reportId } = req.params
    const updated = await prisma.report.update({
      where: { id: Number(reportId) },
      data: { resolvedAt: new Date(), resolvedById: req.user.id }
    })
    return res.json({ message: "Report resolved", updated })
  } catch {
    return res.status(500).json({ message: "Error resolving report" })
  }
}

export const deleteUser = async (req, res) => {
  try {
    const { userId } = req.params
    const user = await prisma.user.findUnique({
      where: { id: Number(userId) },
      include: {
        documents: true,
        posts: true,
        tradesAsBuyer: true,
        tradesAsSeller: true,
      },
    })

    if (!user) return res.status(404).json({ message: "User not found" })

    // ‚úÖ ‡∏•‡∏ö KYC, Post, Trade
    await prisma.userDocument.deleteMany({ where: { userId: user.id } })
    await prisma.post.deleteMany({ where: { authorId: user.id } })
    await prisma.trade.deleteMany({
      where: { OR: [{ buyerId: user.id }, { sellerId: user.id }] },
    })

    // ‚úÖ log ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
    await prisma.adminActionLog.create({
      data: {
        adminId: req.user.id,
        action: "delete_user",
        targetUserId: user.id,
        details: { email: user.email },
      },
    })

    // ‚úÖ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏•‡∏ö user
    await prisma.user.delete({ where: { id: user.id } })

    // ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á (optional)
    try {
      await transporter.sendMail({
        from: process.env.SMTP_USER,
        to: user.email,
        subject: "Account Deleted ‚ùå",
        text: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${user.name || "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"}, ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö`,
      })
    } catch (e) {
      console.warn("‚ö†Ô∏è Failed to send deletion email:", e.message)
    }

    return res.json({ message: `User ${user.email} deleted successfully` })
  } catch (e) {
    console.error("‚ùå deleteUser error:", e)
    return res.status(500).json({ message: "Error deleting user", error: e.message })
  }
}
