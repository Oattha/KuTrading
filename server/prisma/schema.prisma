// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ===== Enums =====
enum UserRole {
  user
  admin
}

enum UserStatus {
  pending
  active
  banned
}

enum KycStatus {
  submitted
  approved
  rejected
}

enum PostVisibility {
  public
  friendsOnly
}

enum MessageType {
  text
  image
  system
}

enum TradeStatus {
  requested
  pending
  accepted
  completed
  canceled
}

enum ReviewVisibility {
  visible
  hidden
}

enum NotificationType {
  system
  kyc
  trade
  review
  message
}

enum ReportStatus {
  open
  inReview
  resolved
  rejected
}

enum ConversationType {
  private
  trade
}
/// ===== Models =====

model User {
  id               Int        @id @default(autoincrement())
  email            String     @unique
  password         String?
  name             String?
  bio              String?
  avatarUrl        String?
  role             UserRole   @default(user)
  status           UserStatus @default(pending)
  isEmailVerified  Boolean    @default(false)

  ratingAverage    Float      @default(0)
  ratingCount      Int        @default(0)

  documents        UserDocument[]
  posts            Post[]
  comments         Comment[]
  likes            Like[]
  followers        Follow[]   @relation("followers")
  following        Follow[]   @relation("following")
  conversations    ConversationParticipant[]
  messages         Message[]  @relation("UserMessages")
  tradesAsBuyer    Trade[]    @relation("TradesAsBuyer")
  tradesAsSeller   Trade[]    @relation("TradesAsSeller")
  reviewsGiven     Review[]   @relation("ReviewsGiven")
  reviewsReceived  Review[]   @relation("ReviewsReceived")
  notifications    Notification[]

  // ‡∏ù‡∏±‡πà‡∏á Report
  reportsMade      Report[]   @relation("Report_Reporter")
  reportsResolved  Report[]   @relation("Report_ResolvedBy")
  reportsTargeted  Report[]   @relation("Report_TargetUser")

  // ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
  reviewedDocuments UserDocument[] @relation("ReviewedBy")
  adminActionLogs  AdminActionLog[] @relation("AdminActor")
  adminTargetLogs  AdminActionLog[] @relation("AdminLog_TargetUser") // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
    // ‚úÖ ‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á MessageRead
  messageReads     MessageRead[]

  @@index([status])
  @@index([role])
}

model UserDocument {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  fileUrl     String
  publicId    String        // ‚¨ÖÔ∏è ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
  status      KycStatus  @default(submitted)
  note        String?
  reviewedBy  User?      @relation("ReviewedBy", fields: [reviewedById], references: [id], onDelete: SetNull)
  reviewedById Int?
  reviewedAt  DateTime?

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId, status])
}

model Post {
  id          Int           @id @default(autoincrement())
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
  content     String
  visibility  PostVisibility @default(public)

  images      PostImage[]
  comments    Comment[]
  likes       Like[]
  trades      Trade[]
  reports     Report[] @relation("Report_TargetPost")

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([authorId])
  @@index([createdAt])
}

model PostImage {
  id        Int     @id @default(autoincrement())
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  url       String
  position  Int     @default(0)

  @@index([postId])
}

model Comment {
  id        Int     @id @default(autoincrement())
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  content   String

  createdAt DateTime @default(now())

  @@index([postId])
  @@index([authorId, createdAt])
}

model Like {
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
  createdAt DateTime @default(now())

  @@id([userId, postId])
  @@index([postId])
}

model Follow {
  follower   User   @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId Int
  following  User   @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int
  createdAt  DateTime @default(now())

  @@id([followerId, followingId])
}

model Conversation {
  id             Int               @id @default(autoincrement())
  type           ConversationType  @default(private)     // üëà ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏ô‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á
  trade          Trade?            @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  tradeId        Int?                                      // üëà ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ó‡∏£‡∏î ‡∏à‡∏∞‡∏°‡∏µ tradeId
  isGroup        Boolean           @default(false)
  title          String?
  participants   ConversationParticipant[]
  messages       Message[]
  lastMessageAt  DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([lastMessageAt])
  @@index([type])
  @@index([tradeId])
}


model ConversationParticipant {
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  joinedAt       DateTime     @default(now())
  isMuted        Boolean      @default(false)

  @@id([conversationId, userId])
  @@index([userId])
}

model Message {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int
  sender         User         @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId       Int
  type           MessageType  @default(text)
  text           String?
  mediaUrl       String?
  metadata       Json?
  readAt         DateTime?
  createdAt      DateTime     @default(now())
  reads         MessageRead[]   // üëà relation ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  @@index([conversationId, createdAt])
  @@index([senderId])
  
}

model Trade {
  id            Int        @id @default(autoincrement())
  buyer         User       @relation("TradesAsBuyer", fields: [buyerId], references: [id], onDelete: Restrict)
  buyerId       Int
  seller        User       @relation("TradesAsSeller", fields: [sellerId], references: [id], onDelete: Restrict)
  sellerId      Int
  post          Post?      @relation(fields: [postId], references: [id], onDelete: SetNull)
  postId        Int?

  /// üëá ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡∏°‡πà
  offerText     String?     // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏•‡∏Å
  offerImageUrl String?     // ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏•‡∏Å (‡∏≠‡∏±‡∏õ Cloudinary ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö URL)

  location      String
  scheduledAt   DateTime?
  status        TradeStatus @default(requested)

  reviews       Review[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([buyerId])
  @@index([sellerId])
  @@index([status, updatedAt])
  Conversation Conversation[]
}


model Review {
  id          Int        @id @default(autoincrement())
  trade       Trade      @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  tradeId     Int
  reviewer    User       @relation("ReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewerId  Int
  reviewee    User       @relation("ReviewsReceived", fields: [revieweeId], references: [id], onDelete: Cascade)
  revieweeId  Int
  rating      Int
  comment     String?
  hidden      Boolean  @default(false)  // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  visibility  ReviewVisibility @default(visible)

  reports     Report[]   @relation("Report_TargetReview")
  adminLogs   AdminActionLog[] @relation("AdminLog_TargetReview")

  createdAt   DateTime   @default(now())

  @@unique([tradeId, reviewerId])
  @@index([revieweeId])
}

model Notification {
  id        Int              @id @default(autoincrement())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  type      NotificationType @default(system)
  title     String?
  body      String?
  metadata  Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@index([userId, isRead, createdAt])
}

model Report {
  id             Int         @id @default(autoincrement())
  reporter       User        @relation("Report_Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId     Int

  targetUser     User?       @relation("Report_TargetUser", fields: [targetUserId], references: [id], onDelete: SetNull)
  targetUserId   Int?
  targetPost     Post?       @relation("Report_TargetPost", fields: [targetPostId], references: [id], onDelete: SetNull)
  targetPostId   Int?
  targetReview   Review?     @relation("Report_TargetReview", fields: [targetReviewId], references: [id], onDelete: SetNull)
  targetReviewId Int?

  reason         String
  status         ReportStatus @default(open)

  resolvedBy     User?       @relation("Report_ResolvedBy", fields: [resolvedById], references: [id], onDelete: SetNull)
  resolvedById   Int?
  resolvedAt     DateTime?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([status])
  @@index([reporterId])
  @@index([targetUserId, targetPostId, targetReviewId])
}

model AdminActionLog {
  id           Int      @id @default(autoincrement())
  admin        User?    @relation("AdminActor", fields: [adminId], references: [id], onDelete: SetNull)
  adminId      Int?

  action       String

  targetUser   User?    @relation("AdminLog_TargetUser", fields: [targetUserId], references: [id], onDelete: SetNull)
  targetUserId Int?
  targetReview Review?  @relation("AdminLog_TargetReview", fields: [targetReviewId], references: [id], onDelete: SetNull)
  targetReviewId Int?

  details      Json?
  reason       String?
  createdAt    DateTime @default(now())

  @@index([adminId, createdAt])
}


model MessageRead {
  id        Int      @id @default(autoincrement())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  readAt    DateTime @default(now())

  @@unique([messageId, userId]) // 1 user ‡∏ï‡πà‡∏≠ 1 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
  @@index([userId])
  @@index([messageId])
}