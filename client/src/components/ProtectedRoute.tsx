import { Navigate, useLocation } from "react-router-dom"
import { useAuth } from "@/store/auth"

interface ProtectedRouteProps {
  children: React.ReactNode
  role?: "user" | "admin"
}

export default function ProtectedRoute({ children, role }: ProtectedRouteProps) {
  const { user, token, loading } = useAuth()
  const location = useLocation()

  // üü° ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î user ‡∏≠‡∏¢‡∏π‡πà ‚Üí ‡πÅ‡∏™‡∏î‡∏á loader
  if (loading) {
    return <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå...</p>
  }

  // ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ token ‚Üí ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login
  if (!token) {
    return (
      <Navigate
        to={role === "admin" ? "/admin/login" : "/login"}
        replace
        state={{ from: location }}
      />
    )
  }

  // ‚ùå login ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà role ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á
  if (role && user?.role !== role) {
    return (
      <Navigate
        to={role === "admin" ? "/admin/login" : "/login"}
        replace
      />
    )
  }

  // ‚ùå ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô
  if (user?.status === "banned") {
    alert("‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
    return <Navigate to="/login" replace />
  }

  // üîë ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô user ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô KYC
// üîë ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô user ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô KYC
if (role === "user") {
  const kycApproved =
    user?.documents?.some(doc => doc.status === "approved") 
    || user?.status === "active" // ‚úÖ fallback ‡∏ñ‡πâ‡∏≤ admin ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô active

  if (!kycApproved && location.pathname !== "/kyc-upload") {
    return <Navigate to="/kyc-upload" replace />
  }
}


  // ‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
  return <>{children}</>
}
